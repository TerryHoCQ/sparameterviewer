diff --git a/CHANGELOG.md b/CHANGELOG.md
index 79aea14..a023183 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -2,6 +2,13 @@ S-Parameter Viewer Changelog
 ============================
 
 
+0.40b8 (2025-06-10)
+-------------------
+
+- change: can now manually override selection in the filter dialog
+- bugfix: various small fixes
+
+
 0.40b7 (2025-06-09)
 -------------------
 
diff --git a/README.md b/README.md
index 42c6c4b..c11faea 100644
--- a/README.md
+++ b/README.md
@@ -26,6 +26,7 @@ Roadmap
 
 ### Missing Features
 
+- GUI: in the filter dialog, allow the user to re-fine the selection by selecting items with the mouse.
 - GUI: how can I say "plot all these files, normalize the S-parameters to that other file"?
 - General: "TODO"-comments in code.
 - GUI: expression file history.
diff --git a/src/gui/filter_dialog.py b/src/gui/filter_dialog.py
index ebab1ad..5173c49 100644
--- a/src/gui/filter_dialog.py
+++ b/src/gui/filter_dialog.py
@@ -1,5 +1,5 @@
 from .filter_dialog_ui import FilterDialogUi
-from lib import Settings, PathExt
+from lib import Settings, PathExt, natural_sort_key
 from typing import Optional
 import re
 import dataclasses
@@ -28,11 +28,13 @@ class FilterDialog(FilterDialogUi):
         self.ui_regex_mode = Settings.search_regex
         self.ui_search_text = Settings.last_search
         
-        return FilterDialog.Result(super().ui_show_modal(), self._matched_files)
+        return FilterDialog.Result(super().ui_show_modal(), self.ui_get_selected_files())
 
 
     def _set_displayed_files(self, matched_files: list[PathExt], unmatched_files: list[PathExt]):
-        self.ui_set_files([file.final_name for file in matched_files], [file.final_name for file in unmatched_files])
+        matched_files = sorted(matched_files, key=lambda item: natural_sort_key(item.final_name))
+        unmatched_files = sorted(unmatched_files, key=lambda item: natural_sort_key(item.final_name))
+        self.ui_set_files([file for file in matched_files], [file for file in unmatched_files])
     
 
     def do_filtering(self):
diff --git a/src/gui/filter_dialog_ui.py b/src/gui/filter_dialog_ui.py
index 8185e1a..1ba9a36 100644
--- a/src/gui/filter_dialog_ui.py
+++ b/src/gui/filter_dialog_ui.py
@@ -1,6 +1,6 @@
 from .helpers.qt_helper import QtHelper
 from info import Info
-from lib import AppPaths
+from lib import AppPaths, PathExt
 from PyQt6 import QtCore, QtGui, QtWidgets
 from PyQt6.QtCore import *
 from PyQt6.QtGui import *
@@ -22,6 +22,15 @@ class FilterDialogUi(QDialog):
         Remove = enum.auto()
         Toggle = enum.auto()
 
+    
+
+    class PathItem(QStandardItem):
+
+        def __init__(self, path: PathExt):
+            super().__init__()
+            self.path = path
+            self.setText(path.final_name)
+
 
     def __init__(self, parent):
         super().__init__(parent)
@@ -47,21 +56,34 @@ class FilterDialogUi(QDialog):
         self._ui_regex_radio.toggled.connect(self.on_search_mode_change)
 
         self._ui_files_list = QListView()
+        self._ui_files_list.setToolTip('Files that match your search are selected here. You may manually change the selection.')
         self._ui_files_list.setMinimumSize(200, 100)
         self._ui_files_model = QtGui.QStandardItemModel()
         self._ui_files_list.setModel(self._ui_files_model)
+        self._ui_files_list.setSelectionMode(QAbstractItemView.SelectionMode.MultiSelection)
+        
+        # set more vibrant colors (by default, the selection cannot be distinguished clearly from non-selection)
+        palette = QPalette()
+        color_text = palette.color(QPalette.ColorRole.HighlightedText).name()
+        color_bg = palette.color(QPalette.ColorRole.Highlight).name()
+        self._ui_files_list.setStyleSheet(f"""
+            QListView::item:selected {{
+                background-color: {color_bg};
+                color: {color_text};
+            }}
+        """)
 
         self.ui_select_button = QPushButton('Select')
-        self.ui_select_button.setToolTip('Only select these files')
+        self.ui_select_button.setToolTip('Only plot selected files')
         self.ui_select_button.clicked.connect(self._on_select)
         self.ui_add_button = QPushButton('+')
-        self.ui_add_button.setToolTip('Additionally select these files')
+        self.ui_add_button.setToolTip('Additionally plot selected files')
         self.ui_add_button.clicked.connect(self._on_add)
         self.ui_remove_button = QPushButton('-')
-        self.ui_remove_button.setToolTip('Un-select these files')
+        self.ui_remove_button.setToolTip('Don\'t plot selected files')
         self.ui_remove_button.clicked.connect(self._on_remove)
         self.ui_toggle_button = QPushButton('~')
-        self.ui_toggle_button.setToolTip('Toggle selection of these files')
+        self.ui_toggle_button.setToolTip('Toggle plotting of selected files files')
         self.ui_toggle_button.clicked.connect(self._on_toggle)
         
         self.setLayout(QtHelper.layout_v(
@@ -111,20 +133,25 @@ class FilterDialogUi(QDialog):
             self._ui_wildcard_radio.setChecked(True)
     
 
-    def ui_set_files(self, files: list[str], other_files: list[str]):
+    def ui_set_files(self, selected_files: list[PathExt], other_files: list[PathExt]):
         self._ui_files_model.clear()
-        for file in files:
-            item = QtGui.QStandardItem(file)
-            #item.setForeground(QPalette().color(QPalette.ColorRole.HighlightedText))
-            #item.setBackground(QPalette().color(QPalette.ColorRole.Highlight))
-            self._ui_files_model.appendRow(item)
-        font = None            
-        for other_file in other_files:
-            item = QtGui.QStandardItem(other_file)
-            item.setForeground(QPalette().color(QPalette.ColorRole.PlaceholderText))
-            font = font or QtHelper.make_font(base=item.font(), strikethru=True)
-            item.setFont(font)
+        for file in [*selected_files, *other_files]:
+            item = FilterDialogUi.PathItem(file)
             self._ui_files_model.appendRow(item)
+        
+        selection = QItemSelection(
+            self._ui_files_model.index(0, 0),
+            self._ui_files_model.index(len(selected_files)-1, 0),
+        )
+        self._ui_files_list.selectionModel().select(selection, QItemSelectionModel.SelectionFlag.Select)
+    
+
+    def ui_get_selected_files(self) -> list[PathExt]:
+        result = []
+        for index in self._ui_files_list.selectionModel().selectedRows(0):
+            item: FilterDialogUi.PathItem = self._ui_files_model.itemFromIndex(index)
+            result.append(item.path)
+        return result
     
 
     def ui_indicate_search_error(self, indicate_error: bool = True):
diff --git a/src/gui/main_window_ui.py b/src/gui/main_window_ui.py
index 57eea41..1ca3c10 100644
--- a/src/gui/main_window_ui.py
+++ b/src/gui/main_window_ui.py
@@ -125,7 +125,7 @@ class MainWindowUi(QMainWindow):
         self._ui_logy_button = QtHelper.make_toolbutton(self, None, self.on_logy_changed, icon='toolbar_log-y.svg', tooltip='Logarithmic Y-Axis', checked=False)
         self._ui_lockx_button = QtHelper.make_toolbutton(self, None, self.on_lock_xaxis, icon='toolbar_lock-x.svg', tooltip='Lock X-Axis Scale')
         self._ui_locky_button = QtHelper.make_toolbutton(self, None, self.on_lock_yaxis, icon='toolbar_lock-y.svg', tooltip='Lock Y-Axis Scale')
-        self._ui_lockboth_button = QtHelper.make_toolbutton(self, None, self.on_lock_both_axes, icon='toolbar_lock-y.svg', tooltip='Lock both X- and Y-Axis Scales')
+        self._ui_lockboth_button = QtHelper.make_toolbutton(self, None, self.on_lock_both_axes, icon='toolbar_lock-both.svg', tooltip='Lock both X- and Y-Axis Scales')
         self._ui_smartdb_button = QtHelper.make_toolbutton(self, None, self.on_smart_db, icon='toolbar_smart-db.svg', tooltip='Attempt Smart Scaling of dB-Values', checked=False)
         self._ui_pan_button = QtHelper.make_toolbutton(self, None, self._on_plottool_pan, icon='toolbar_pan.svg', tooltip='Pan-Tool for Plot', checked=False)
         self._ui_zoom_button = QtHelper.make_toolbutton(self, None, self._on_plottool_zoom, icon='toolbar_zoom.svg', tooltip='Zoom-Tool for Plot', checked=False)
@@ -307,12 +307,12 @@ class MainWindowUi(QMainWindow):
             [self._ui_auto_cursor_check, self._ui_auto_cursor_trace_check, 'ΔX:', self._ui_cursor_readout_dx, 'ΔY:', self._ui_cursor_readout_dy],
             [None, None, QtHelper.CellSpan(self._ui_cursor_syncx_check, cols=2)],
         ])
-        cursor_layout.setColumnStretch(0, 1)
-        cursor_layout.setColumnStretch(1, 4)
+        cursor_layout.setColumnStretch(0, 0)
+        cursor_layout.setColumnStretch(1, 2)
         cursor_layout.setColumnStretch(2, 0)
-        cursor_layout.setColumnStretch(3, 4)
+        cursor_layout.setColumnStretch(3, 1)
         cursor_layout.setColumnStretch(4, 0)
-        cursor_layout.setColumnStretch(5, 4)
+        cursor_layout.setColumnStretch(5, 1)
         self._ui_cursors_tab.setLayout(QtHelper.layout_v(cursor_layout,...))
 
         self._ui_status_bar = StatusBar()
@@ -392,6 +392,9 @@ class MainWindowUi(QMainWindow):
         else:
             raise ValueError()
 
+        self._ui_splitter.setCollapsible(0, False)
+        self._ui_splitter.setCollapsible(1, False)
+
 
     def resizeEvent(self, arg):
         result = super().resizeEvent(arg)
